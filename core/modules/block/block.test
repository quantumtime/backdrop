<?php

/**
 * @file
 * Tests for block.module.
 */

class BlockTestCase extends BackdropWebTestCase {
  protected $admin_user;

  function setUp() {
    parent::setUp('block_test');

    // Create and log in an administrative user having access to the Full HTML
    // text format.
    $full_html_format = filter_format_load('full_html');
    $this->admin_user = $this->backdropCreateUser(array(
      'administer blocks',
      filter_permission_name($full_html_format),
      'access administration pages',
      'administer layouts',
    ));
    $this->backdropLogin($this->admin_user);
  }

  /**
   * Test creating custom block, moving it to a specific region and then deleting it.
   */
  function testCustomBlock() {
    // Confirm that the add block link appears on block overview pages.
    $this->backdropGet('admin/structure/block');
    $this->assertRaw(l('Add block', 'admin/structure/block/add'), 'Add block link is present on block overview page for default theme.');

    // Add a new custom block by filling out the input form on the admin/structure/block/add page.
    $custom_block = array();
    $custom_block['info'] = $this->randomName(8);
    $custom_block['title'] = $this->randomName(8);
    $custom_block['body[value]'] = $this->randomName(32);
    $this->backdropPost('admin/structure/block/add', $custom_block, 'Save block');

    // Confirm that the custom block has been created, and then query the created bid.
    $this->assertText(t('The block has been created.'), 'Custom block successfully created.');
    $bid = db_query("SELECT bid FROM {block_custom} WHERE info = :info", array(':info' => $custom_block['info']))->fetchField();

    // Check to see if the custom block was created by checking that it's in the database.
    $this->assertNotNull($bid, 'Custom block found in database');

    // Check that block_block_view() returns the correct title and content.
    $data = block_block_view($bid);
    $format = db_query("SELECT format FROM {block_custom} WHERE bid = :bid", array(':bid' => $bid))->fetchField();
    $this->assertEqual($data['subject'], $custom_block['title'], 'block_block_view() provides the correct block title.');
    $this->assertEqual(check_markup($custom_block['body[value]'], $format), $data['content'], 'block_block_view() provides correct block content.');

    // Check whether the block can be moved to all available regions.
    $custom_block['module'] = 'block';
    $custom_block['delta'] = $bid;
    $layout = layout_load('layout_default');
    $layout_info = layout_get_layout_info($layout->layout);
    foreach (array_keys($layout_info['regions']) as $region) {
      $this->moveBlockToRegion($layout, $custom_block, $region);
    }

    // Verify presence of configure and delete links for custom block.
    $this->backdropGet('admin/structure/block');
    $this->assertLinkByHref('admin/structure/block/manage/' . $bid . '/configure', 0, 'Custom block configure link found.');
    $this->assertLinkByHref('admin/structure/block/manage/' . $bid . '/delete', 0, 'Custom block delete link found.');

    // Delete the created custom block & verify that it's been deleted and no longer appearing on the page.
    $this->clickLink(t('Delete'));
    $this->backdropPost('admin/structure/block/manage/' . $bid . '/delete', array(), 'Delete');
    $this->assertRaw(t('The block %title has been removed.', array('%title' => $custom_block['info'])), 'Custom block successfully deleted.');
    $this->assertNoText(t($custom_block['title']), 'Custom block no longer appears on page.');
  }

  /**
   * Test creating custom block using Full HTML.
   */
  function testCustomBlockFormat() {
    // Add a new custom block by filling out the input form on the admin/structure/block/add page.
    $custom_block = array();
    $custom_block['info'] = $this->randomName(8);
    $custom_block['title'] = $this->randomName(8);
    $custom_block['body[value]'] = '<h1>Full HTML</h1>';
    $full_html_format = filter_format_load('full_html');
    $custom_block['body[format]'] = $full_html_format->format;
    $this->backdropPost('admin/structure/block/add', $custom_block, 'Save block');

    // Set the created custom block to a specific region.
    $layout = layout_load('layout_default');
    $this->moveBlockToRegion($layout, $custom_block, 'content');

    // Confirm that the custom block is being displayed using configured text format.
    $this->backdropGet('node');
    $this->assertRaw('<h1>Full HTML</h1>', 'Custom block successfully being displayed using Full HTML.');

    // Confirm that a user without access to Full HTML can not see the body field,
    // but can still submit the form without errors.
    $block_admin = $this->backdropCreateUser(array('administer blocks'));
    $this->backdropLogin($block_admin);
    $this->backdropGet('admin/structure/block/manage/' . $bid . '/configure');
    $this->assertFieldByXPath("//textarea[@name='body[value]' and @disabled='disabled']", 'This field has been disabled because you do not have sufficient permissions to edit it.', 'Body field contains denied message');
    $this->backdropPost('admin/structure/block/manage/' . $bid . '/configure', array(), 'Save block');
    $this->assertNoText(t('Ensure that each block description is unique.'));

    // Confirm that the custom block is still being displayed using configured text format.
    $this->backdropGet('node');
    $this->assertRaw('<h1>Full HTML</h1>', 'Custom block successfully being displayed using Full HTML.');
  }

  function moveBlockToRegion($layout, $block, $region) {
    // Confirm that the custom block was found at the proper region.
    switch ($region) {
      case 'header':
        $xpath = $this->buildXPathQuery('//*[@id=:region-id]//*[contains(@class,:block-class)]/*', array(
          ':region-id' => 'header',
          ':block-class' => 'block-' . $block['module'] . '-' . $block['delta'],
        ));
        break;

      case 'footer':
        $xpath = $this->buildXPathQuery('//*[@id=:region-id]//*[contains(@class,:block-class)]/*', array(
          ':region-id' => 'footer',
          ':block-class' => 'block-' . $block['module'] . '-' . $block['delta'],
        ));
        break;

      case 'content':
        $xpath = $this->buildXPathQuery('//*[@id=:region-id]//*[contains(@class,:block-class)]/*', array(
          ':region-id' => 'content',
          ':block-class' => 'block-' . $block['module'] . '-' . $block['delta'],
        ));
        break;

      case 'sidebar':
        $xpath = $this->buildXPathQuery('//*[@id=:region-id]//*[contains(@class,:block-class)]/*', array(
          ':region-id' => 'sidebar',
          ':block-class' => 'block-' . $block['module'] . '-' . $block['delta'],
        ));
        break;
    }

    // Add the block to a specific region.
    $edit = array(
      'region' => $region,
    );
    $this->backdropPost('admin/structure/layouts/manage/' . $layout->name . '/add-block/editor/' . $region . '/' . $block['module'] . ':' . $block['delta'], $edit, t('Add block'));
    $this->backdropPost('admin/structure/layouts/manage/' . $layout->name, array(), t('Save layout'));

    // Get the block ID.
    $block_uuid = end($layout->positions[$region]);

    // Confirm that the block is being displayed.
    $this->backdropGet('node');
    $this->assertText(t($block['title']), 'Block successfully being displayed on the page.');

    $this->assertFieldByXPath($xpath, NULL, format_string('Custom block found in %region_name region.', array('%region_name' => $region)));

    // Remove the block from that region.
    $token = backdrop_get_token('layout-' . $layout->name);
    $this->backdropGet('admin/structure/layouts/manage/' . $layout->name . '/remove-block/editor/' . $block_uuid, array('query' => array('token' => $token)));
  }
}
